# 🧠 Project: Tender AI Assistant

This repository contains a complete solution for tender document analysis using an OpenAI assistant integrated with a vector knowledge base. The solution is composed of three main layers:

* **Knowledge Base (Assistant + Vector Store)**
* **Backend (Flask API)**
* **Frontend (HTML/JS)**

---

## 📌 Assumptions

* The knowledge base is automatically fed with files generated by a Project Management Information System (PMIS).
* These files are precompiled with context to facilitate interpretation and answers by the assistant.
* The frontend receives a tender file (such as a Terms of Reference) and submits it for assistant analysis.
* The analysis includes identifying risks, deliverables, attention points, and possible change areas based on previous projects.
* The prompt is automatically pre-filled based on the file name.
* The frontend also allows uploading new documents to feed the knowledge base.
* The backend separates assets by type:

  * The assistant's vector store is **exclusively populated** with knowledge base files.
  * Input files (e.g., tender documents for analysis) are **not stored** in the same vector store, only used during runtime.

---

## 🧩 Project Structure

```
📁 project-tender-assistant/
├── backend/
│   └── app2.py              # Flask API for uploads and assistant execution
├── frontend/
│   └── assist3.html         # HTML page for upload and analysis
├── README.md
```

---

## 🔁 Execution Flow

```
Document Source
    ↓
Vector Store
    ↓
OpenAI Assistant (asst_CuK3xFpKPy4Z7IbCrz26tX9z)
    ↓
Flask API (processing, upload, execution)
    ↓
HTML Frontend (user interface)
```

---

## 🔧 Backend (Flask API)

* `POST /assist/upload`: Uploads documents to feed the assistant's knowledge base.
* `POST /assist/ask-file`: Sends a file and question for assistant analysis using its knowledge base and the uploaded file.
* Fixed IDs used:

  * `assistant_id`: asst\_CuK3xFpKPy4Z7IbCrz26tX9z
  * `vector_store_id`: vs\_6838fccc5c8081918e032a89bf8975d6

### Example usage in backend:

```python
openai.beta.threads.messages.create(
    thread_id=thread.id,
    role="user",
    content=message,
    attachments=[
        {
            "file_id": openai_file.id,
            "tools": [{"type": "file_search"}]
        }
    ]
)
```

---

## 💻 Frontend (HTML)

* The `assist3.html` page has two sections:

  * Upload and analysis with auto-generated prompt
  * Upload to feed the vector store knowledge base
* The auto-generated prompt:

```pt
Você é o analista de licitações e deve analisar este arquivo, ${fileName}, identificando todos os pontos de atenção, riscos e entregáveis. A sua base de referência deve ser a base de conhecimento armazenada no Vector Store relacionado ao assistente. Preciso que seja detalhado nesses aspectos, pois isso servirá de base para avaliarmos a viabilidade de participação.
```

* Files sent for analysis are processed in isolation and **not stored** in the assistant's knowledge base.

---

## 📁 Requirements

* Python 3.10+
* Flask
* OpenAI SDK
* Pure HTML/CSS/JS frontend

---

## 🚀 How to Run

```bash
cd backend
python app2.py
```

Open `assist3.html` in a browser to start using the tool.

---

## 🛡️ Security Considerations

* Files submitted for analysis are not persistently stored.
* Only files explicitly uploaded through the knowledge base form are linked to the assistant's vector store.

---

## 📬 Contact

For questions or suggestions, please contact the project maintainer.
